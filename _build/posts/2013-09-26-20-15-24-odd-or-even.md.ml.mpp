%% Copyright (C) 2013  Philippe Wang
{< module Meta : Meta = struct
 let title = "(Exercise) Odd or even?"
 let id = "posts/2013-09-26-20-15-24-odd-or-even.html"
 let xmldate = "2013-09-26T20:15:24+00:00"
 let rssdate = "Thu, 26 Sep 2013 20:15:24 +0000"
 let date = "2013-09-26 20:15:24+00:00"
 let tags = [ "ocaml"; "exercise"; ]
 let disqus = true
 let stamp = true
 let tryocaml = true
end
include Meta
>}

{< module Post(Printer:Printer) = struct open Printer >}

Given a string (of bytes), is the number of bits set to 1 odd or even?

The most naive way is to count them all, and then see if the number is 
even or odd. But it's probably better not to use an integer to count them
all, and instead, use a Boolean: each time we see a 1, we can simply flip the
Boolean value!

```tryocaml
let has_an_odd_number_of_1 s =
  let res = ref false in
  for i = 0 to String.length s - 1 do
    let x = int_of_char s.[i] in
    for j = 0 to 7 do
      if (x lsr j) land 1 = 1 then
        res.contents <- not res.contents;
    done
  done;
  res.contents
```

But there's way more efficient than that! Indeed, unless we really don't have a choice,
we shouldn't read bits one by one, because it's slow.

So what can we do instead?

Well, there's a very very convenient logical operation on integers.
It's called XOR (and the OCaml operator for that is `lxor`), and yes
we can use it!

You see, 1 XOR 1 = 0; 0 XOR 0 = 0; but 1 XOR 0 or 0 XOR 1 = 1.
It's very convenient because it's basically giving us the answer!
When we have two 1s, we can eliminate them, that's what happens with XOR.
When we have a 1 and a 0, we keep the 1.
So if we take those bytes byte by byte, and XOR them with each other,
at the end we will have one remaining byte that will tell us if the
whole string had an odd number of 1 or not.


```tryocaml
let has_an_odd_number_of_1__efficient s =
  let l = String.length s in
  let rec loop c i =
    if i = l then
      let res = ref false in
      for j = 0 to 7 do
        if (c lsr j) land 1 = 1 then
          res.contents <- not res.contents;
      done;
      res.contents
    else
      loop (c lxor int_of_char s.[i]) (succ i)
  in loop 0 0
```

And... There we go!  :-)

Note that `int_of_char` is a zero-cost operation (but `char_of_int` is not because it 
has to check that the value of the given integer is between 0 and 255 inclusive).

{< end >}


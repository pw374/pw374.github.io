<?xml version='1.0' encoding='UTF-8'?><rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'><channel><title>pw374</title><link>http://pw374.github.io/</link><atom:link href='http://pw374.github.io/blog-rss.xml' rel='self' type='application/rss+xml' /><description>pw374 blog</description><language>en-gb</language><pubDate>Wed, 15 Jan 2014 15:14:14 +0000</pubDate><lastBuildDate>Wed, 15 Jan 2014 15:14:14 +0000</lastBuildDate>
    <item>
      <title>OMD: a Markdown parser in OCaml</title>
      <link>http://pw374.github.io/posts/2013-09-05-22-31-26-about-omd.html</link>
      <category>ocaml</category><category>markdown</category><category>omd</category>
      <pubDate>Thu, 05 Sep 2013 22:31:26 +0100</pubDate>
      <author>philippe.wang@cl.cam.ac.uk (Philippe Wang)</author>
      <guid>http://pw374.github.io/posts/2013-09-05-22-31-26-about-omd.html</guid>
      <description><![CDATA[
      ]]></description>
    </item>

    <item>
      <title>OPAM-DOC with multiple OCaml packages</title>
      <link>http://pw374.github.io/posts/2013-09-24-01-50-14-opamdoc-take1.html</link>
      <category>ocaml</category><category>opamdoc</category><category>opam</category>
      <pubDate>Tue, 24 Sep 2013 01:50:14 +0100</pubDate>
      <author>philippe.wang@cl.cam.ac.uk (Philippe Wang)</author>
      <guid>http://pw374.github.io/posts/2013-09-24-01-50-14-opamdoc-take1.html</guid>
      <description><![CDATA[
&#60;h3 id=&#34;OPAMDOC&#34;&#62;&#60;a href=&#39;https://github.com/ocamllabs/opam-doc/&#39;&#62;OPAM-DOC&#60;/a&#62;&#60;/h3&#62;
&#60;p&#62;The tool &#60;code&#62;ocamldoc&#60;/code&#62; shipped with the standard distribution of the
OCaml compiler suffers from some limitations because it doesn&#38;#39;t have
access to all the information it needs. Notably, if you want to build
the documentation of some package &#60;code&#62;a&#60;/code&#62; that depends on some package
&#60;code&#62;b&#60;/code&#62;, you&#38;#39;ll find out that the documentation of the package &#60;code&#62;a&#60;/code&#62; will
not automatically refer to the documentation of the package &#60;code&#62;b&#60;/code&#62;.
Well, opamdoc solves this problem and it&#38;#39;s very nice.&#60;/p&#62;
&#60;p&#62;On &#60;a href=&#39;http://ocaml-redesign.github.io/&#39;&#62;this site&#60;/a&#62;, which is work in progress,
you can find a &#60;a href=&#39;http://ocaml-redesign.github.io/pkg/&#39;&#62;list of packages&#60;/a&#62; 
with their descriptions. This list is built using &#60;a href=&#39;https://github.com/OCamlPro/opam2web&#39;&#62;opam2web&#60;/a&#62;.
And each package description links to its documentation. And the documentation
for all packages is built as a whole, which means that if the documentation of 
a package links to all other packages on which it depends. Isn&#38;#39;t it nice? 
:)&#60;/p&#62;
&#60;h3 id=&#34;Installandrunopamdoc&#34;&#62;Install and run opamdoc&#60;/h3&#62;
&#60;p&#62;opamdoc is still under active development, the current step is
&#60;a href=&#39;https://github.com/ocamllabs/opam-doc/issues/&#39;&#62;finding and fixing remaining issues&#60;/a&#62; and
packaging.&#60;/p&#62;
&#60;p&#62;If you want to use opamdoc now, here&#38;#39;s some instructions based on
&#60;a href=&#39;https://github.com/ocamllabs/opam-doc/issues/1#issuecomment-23430108&#39;&#62;Anil&#38;#39;s instructions&#60;/a&#62;, 
which are those:&#60;/p&#62;
&#60;blockquote&#62;&#60;pre&#62;&#60;code&#62;opam remote add opamdoc git://github.com/avsm/opamdoc-dev
opam switch 4.01.0beta1+opamdoc
eval `opam config env`
opam install opamdoc
opamdoc-rebuild
opamdoc-generate
open ~/.opam/4.01.0beta1+opamdoc/opamhtml/index.html&#60;/code&#62;&#60;/pre&#62;
&#60;ul&#62;
 &#60;li&#62;&#60;code&#62;opamdoc-rebuild&#60;/code&#62; builds a database of cmt/cmd files in &#60;code&#62;~/.opam/4.01.0beta1+opamdoc/opamdoc&#60;/code&#62;.&#60;/li&#62;
 &#60;li&#62;&#60;code&#62;opamdoc-generate&#60;/code&#62; builds a package HTML list in &#60;code&#62;~/.opam/4.01.0beta+opamdoc/opamhtml&#60;/code&#62;.&#60;/li&#62;
&#60;/ul&#62;
&#60;/blockquote&#62;
&#60;p&#62;Well, they work quite well, except &#60;code&#62;opamdoc-rebuild&#60;/code&#62; uses &#60;code&#62;.cmd&#60;/code&#62;  files as a base, whereas
it should use &#60;code&#62;.cmt&#60;/code&#62; files instead because sometimes &#60;code&#62;.cmt&#60;/code&#62; files exist while &#60;code&#62;.cmd&#60;/code&#62; don&#38;#39;t.
This is a problem for a few packages (&#60;code&#62;Core&#60;/code&#62; is one of them).&#60;/p&#62;
&#60;p&#62;My advice: if something doesn&#38;#39;t work as expect, 
please &#60;a href=&#39;https://github.com/ocamllabs/opam-doc/issues&#39;&#62;open an issue&#60;/a&#62;, 
and if you want to customize the way the documentation is built, 
don&#38;#39;t hesitate to edit &#60;code&#62;opamdoc-rebuild&#60;/code&#62; and/or &#60;code&#62;opamdoc-generate&#60;/code&#62; (they are Bash scripts).&#60;/p&#62;
&#60;h4 id=&#34;Afewnotesaboutthoseinstructions&#34;&#62;A few notes about those instructions&#60;/h4&#62;
&#60;p&#62;The first line, which is &#60;code&#62;opam remote add opamdoc git://github.com/avsm/opamdoc-dev&#60;/code&#62;, 
will give sense to the second one, which is &#60;code&#62;opam switch 4.01.0beta1+opamdoc&#60;/code&#62;.
And &#60;code&#62;4.01.0beta1+opamdoc&#60;/code&#62; is a customised compiler that produces on the side the &#60;code&#62;.cm{t,d}{,i}&#60;/code&#62; files
that are used by opamdoc. Using it is very convenient! If you don&#38;#39;t use it, you need to produce
those files in an other way &#60;strong&#62;of your choice&#60;/strong&#62; (really? you want to go through such trouble?).&#60;/p&#62;
&#60;p&#62;Note that opamdoc is written in such  a way that it would ask a lot of
work to  make it work  with versions of  the compiler prior  to 4.01.0
because it uses features introduced by this very version.&#60;/p&#62;
&#60;p&#62;Just in case, here follow the customised version of &#60;code&#62;opamdoc-rebuild&#60;/code&#62; and &#60;code&#62;opamdoc-generate&#60;/code&#62; that 
I used to build the documentation available on &#60;a href=&#39;http://ocaml-redesign.github.io/pkg/docs/&#39;&#62;http://ocaml-redesign.github.io/pkg/docs/&#60;/a&#62;.&#60;/p&#62;
&#60;h4 id=&#34;opamdocrebuild&#34;&#62;&#60;code&#62;opamdoc-rebuild&#60;/code&#62;&#60;/h4&#62;
&#60;p&#62;Here&#38;#39;s my customised version of &#60;code&#62;opamdoc-rebuild&#60;/code&#62;:&#60;/p&#62;
&#60;pre&#62;&#60;code&#62;#!/usr/bin/env bash
# Rebuild the cmd/cmt archive in ~/.opam/&#38;lt;switch&#38;gt;/opamdoc
# Copies all the cmt/cmti/cmd files found in the OPAM build
# dir into a single directory structure, separated by MD5
# to keep files distinct.

set -e
#dry=echo
SWITCH=$(opam switch show)
if [ &#38;quot;${SWITCH}&#38;quot; = &#38;quot;system&#38;quot; ]; then
  echo Must be using a custom OPAM switch for this to work.
  exit 1
fi

function calc_md5_for_file()
{
  if builtin command -v md5 &#38;gt; /dev/null; then
    md5=$(cat $1 | md5)
  elif builtin command -v md5sum &#38;gt; /dev/null ; then
    md5=$(cat $1 | md5sum | awk &#38;#39;{print $1}&#38;#39;)
  else
    echo &#38;quot;Neither md5 nor md5sum were found in the PATH&#38;quot;
    exit 1
  fi
}

BASE=&#38;quot;$(dirname $(dirname $(ocamlc -where)))&#38;quot;
BUILD=${BASE}/build
DOC=${BASE}/opamdoc
rm -rf ${DOC}
mkdir -p ${DOC}

PKGS=$(find ${BUILD}/ -mindepth 1 -maxdepth 1 -type d &#38;quot;$@&#38;quot;)
echo ${PKGS}

for pkg in ${PKGS}; do
  pkgname=$(basename $pkg)
  echo $pkgname
  mkdir -p ${DOC}/$pkgname

  CMTS=$(find ${pkg} -type f -name &#38;#39;*.cmt&#38;#39;)
  for cmt in ${CMTS}; do
    d=$(dirname $cmt)
    calc_md5_for_file &#38;quot;$cmt&#38;quot;;

    f=$(basename $cmt .cmt)
    mkdir -p ${DOC}/$pkgname/$md5
    r=${DOC}/$pkgname/$md5/$f
    for ext in cmt cmti cmd cmdi cmi ; do
        if [ -e $d/$f.$ext ]; then
            $dry cp $d/$f.$ext $r.$ext
        fi
    done
  done
done&#60;/code&#62;&#60;/pre&#62;
&#60;h4 id=&#34;opamdocgenerate&#34;&#62;&#60;code&#62;opamdoc-generate&#60;/code&#62;&#60;/h4&#62;
&#60;p&#62;Here&#38;#39;s my customised version of &#60;code&#62;opamdoc-generate&#60;/code&#62;.&#60;/p&#62;
&#60;pre&#62;&#60;code&#62;#!/usr/bin/env bash
# Rebuild the cmd/cmt archive in ~/.opam/&#38;lt;switch&#38;gt;/opamdoc
# Copies all the cmt/cmti/cmd files found in the OPAM build
# dir into a single directory structure, separated by MD5
# to keep files distinct.

set -e
#dry=echo
SWITCH=$(opam switch show)
if [ &#38;quot;${SWITCH}&#38;quot; = &#38;quot;system&#38;quot; ]; then
  echo Must be using a custom OPAM switch for this to work.
  exit 1
fi

OPAMDOC=${OPAMDOC:-opamdoc}


BASE=&#38;quot;$(dirname $(dirname $(ocamlc -where)))&#38;quot;
BUILD=${BASE}/build
DOC=${BASE}/opamdoc
HTML=${BASE}/opamhtml

rm -rf ${HTML}
mkdir -p ${HTML}

# Grab the build dir in reverse mtime order to get the
# ordering of generation &#38;quot;correct&#38;quot;.
PKGS=$(ls -1tr $BUILD)

rm -rf $HTML
mkdir -p $HTML
cd $HTML
for pkg in ${PKGS}; do
  fs=&#38;quot;$(find $DOC/$pkg -type f)&#38;quot;
  if [ &#38;quot;$fs&#38;quot; != &#38;quot;&#38;quot; ]; then
    name=$(echo $pkg | awk -F. &#38;#39;{print $1}&#38;#39;)
    echo $pkg $name
    $dry $OPAMDOC -p $name $fs
  fi
done&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;Enjoy.&#60;/p&#62;
      ]]></description>
    </item>

    <item>
      <title>On the Implementation of OPAMDOC</title>
      <link>http://pw374.github.io/posts/2013-09-24-14-19-56-on-the-implementation-of-opamdoc.html</link>
      <category>ocaml</category><category>opamdoc</category>
      <pubDate>Tue, 24 Sep 2013 14:21:00 +0000</pubDate>
      <author>philippe.wang@cl.cam.ac.uk (Philippe Wang)</author>
      <guid>http://pw374.github.io/posts/2013-09-24-14-19-56-on-the-implementation-of-opamdoc.html</guid>
      <description><![CDATA[
&#60;p&#62;&#60;a href=&#39;https://github.com/ocamllabs/opam-doc/commits/master&#39;&#62;Early this year, Leo White started the implementation of
opamdoc&#60;/a&#62;.
Then &#60;a href=&#39;https://github.com/vincent-botbol&#39;&#62;Vincent Botbol&#60;/a&#62; worked on it
from late May to mid August during his stay in Cambridge.&#60;/p&#62;
&#60;p&#62;Now, Vincent&#38;#39;s back to studying &#38;quot;computer science research&#38;quot; in Paris,
and he continues working on opam-doc when he can on his free time.&#60;/p&#62;
&#60;p&#62;I didn&#38;#39;t really want to get involved too deep in the implementation of
opamdoc (mainly  because it takes time). Eventually,  since I&#38;#39;ve ended
up        doing        most        of       the        &#60;a href=&#39;https://github.com/ocamllabs/sandbox-ocaml.org&#39;&#62;technical-side
implementation&#60;/a&#62; of the
&#60;a href=&#39;http://ocaml-redesign.github.io&#39;&#62;new  ocaml.org web  site&#60;/a&#62;, I  had to
eventually get into  opamdoc&#38;#39;s source code to integrate  its output in
the website.&#60;/p&#62;
&#60;p&#62;If you look at the &#60;a href=&#39;https://github.com/ocamllabs/opam-doc/&#39;&#62;source code of
opamdoc&#60;/a&#62;, you&#38;#39;ll see there&#38;#39;s a
bunch of files at the root directory. Well, some of them are inherited
from the implementation of ocamldoc, and some are new.  I&#38;#39;ve mostly
contributed to
&#60;a href=&#39;https://github.com/ocamllabs/opam-doc/blob/master/generate.ml&#39;&#62;&#60;code&#62;generate.ml&#60;/code&#62;&#60;/a&#62;
and
&#60;a href=&#39;https://github.com/ocamllabs/opam-doc/blob/master/opam_doc_config.ml&#39;&#62;&#60;code&#62;opam_doc_config.ml&#60;/code&#62;&#60;/a&#62;.
The former implements the HTML backend of opamdoc, and the latter
contains the JavaScript engine that loads the documentation. This blog
post is mostly about my experience with those two files.&#60;/p&#62;
&#60;h3 id=&#34;generateml&#34;&#62;generate.ml&#60;/h3&#62;
&#60;p&#62;This big file (about 1.5 kloc) contains the functions to retrieve
the information from cmt, cmd, cmti, cmdi and cmi files in order to
build the HTML document.&#60;/p&#62;
&#60;p&#62;Side note:&#60;/p&#62;
&#60;blockquote&#62;&#60;p&#62;The &#60;a href=&#39;http://www.ocamlpro.com/blog/2012/08/20/ocamlpro-and-4.00.0.html&#39;&#62;&#60;code&#62;.cmt&#60;/code&#62; files were officially introduced in the standard OCaml
compiler in version
4.00.0&#60;/a&#62;,
so it&#38;#39;s pretty recent work. Previously, they were produced by a
separate tool developed at OCamlPro for
&#60;a href=&#39;http://www.typerex.org&#39;&#62;TypeRex&#60;/a&#62;.&#60;/p&#62;
&#60;/blockquote&#62;
&#60;h4 id=&#34;Tworeasonswhyit39snotsupereasy&#34;&#62;Two reasons why it&#38;#39;s not super easy&#60;/h4&#62;
&#60;p&#62;Well, this  can actually  be explain  in just a  few words.   To begin
with, there  are many cases to  address. Well, that is  not &#60;em&#62;exact&#60;/em&#62;. I
should say that  there are may cases to address  &#60;em&#62;and&#60;/em&#62; those cases are
fairly &#60;strong&#62;poorly  documented&#60;/strong&#62;, which is &#38;quot;normal&#38;quot; given  that there was
probably no  particular motivation to put  efforts into documentation.
This is  true for the source  code of ocamldoc &#60;em&#62;and&#60;/em&#62;  for its official
documentation.&#60;/p&#62;
&#60;p&#62;For instance, if you look into
&#60;a href=&#39;https://github.com/ocamllabs/opam-doc/blob/master/info.mli&#39;&#62;&#60;code&#62;info.mli&#60;/code&#62;&#60;/a&#62;, you
can see that the first type definition is:&#60;/p&#62;
&#60;pre class=&#39;ocaml&#39;&#62;&#60;code class=&#39;ocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;type&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;style_kind&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;SK_bold&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;SK_italic&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;SK_emphasize&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;SK_center&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;SK_left&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;SK_right&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;SK_superscript&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;SK_subscript&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;SK_custom&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;of&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;string&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;and the only documentation for this type is
&#60;code&#62;(** The differents kinds of style.  *)&#60;/code&#62;.
Well, you can see that there&#38;#39;s not really any
documentation needed for those &#60;code&#62;SK_...&#60;/code&#62; until... you see
&#60;code&#62;SK_custom of string&#60;/code&#62;.  There you go! You have to guess...&#60;/p&#62;
&#60;p&#62;It&#38;#39;s not that hard when you have to guess a few times, it&#38;#39;s
a lot harder when you keep having to guess. That&#38;#39;s my point.&#60;/p&#62;
&#60;p&#62;Well, the other issue is more interesting.  At the time &#60;code&#62;ocamldoc&#60;/code&#62; was
designed  and  implemented,  I  bet  no one  imagined  what  folks  at
JaneStreet would do with  OCaml!  I&#38;#39;m talking about the implementation
of their  open source library, known  as &#60;code&#62;Core&#60;/code&#62;.  &#38;quot;&#60;code&#62;Core&#60;/code&#62; &#38;amp;  co&#38;quot; use a
&#60;em&#62;&#60;strong&#62;lot&#60;/strong&#62;&#60;/em&#62; of  &#60;code&#62;include&#60;/code&#62; directives.  The module  &#60;code&#62;Core.Std&#60;/code&#62; includes a
lot  of other  modules, which  also include  modules. If  you  want to
generate a single  full HTML page for &#60;code&#62;Core.Std&#60;/code&#62;, you&#38;#39;d  end up with a
&#60;em&#62;&#60;strong&#62;huge&#60;/strong&#62;&#60;/em&#62; page.  And  such a page would contain  a lot of information
coming straight  from other  pages, so you&#38;#39;d  end up with  hundreds of
megabytes.  Instead of  doing so, opamdoc generates only  one page per
package and one per module. If a module includes another one, then the
first will fetch the documentation of the second and there you go.  So
we  only  have 8.4MB  of  HTML  for  {async, async_core,  async_extra,
async_unix,  core, core_bench,  core_extended,  core_kernel} in  total
(well, this  number should  increase in the  future, but  linearly, as
people  will hopefully  start  documenting all  those packages).   And
that&#38;#39;s why we have a JavaScript loader.&#60;/p&#62;
&#60;h3 id=&#34;opamdocconfigmlordocsloaderjs&#34;&#62;opam_doc_config.ml, or docs_loader.js&#60;/h3&#62;
&#60;p&#62;Since the JavaScript  may have to load tens of  megabytes of HTML, you
have to program some nasty functions and loops... and at some point it
does become big enough for  your browser to stop responding while it&#38;#39;s
busy  loading your documentation.  So there  are several  solutions to
that. The best would probably be to stop writing in JavaScript (and
use something else that compiles to JavaScript). But that&#38;#39;s for next
step. Now, we&#38;#39;re trying to make the JavaScript work.&#60;/p&#62;
&#60;p&#62;The problem  with JavaScript  is that basically  there is  one &#38;quot;event&#38;quot;
loop,  and  all events  are  happening  sequentially or  concurrently,
depending on how  you wrote your JS, but when one  event is making the
browser busy,  the browser is unable  to do anything  else. That&#38;#39;s why
your browser may tell you at  some point that you have a script making
it ill and ask you whether  you want it to stop executing that script.
One workaround  for that problem  when you know  you ask for a  lot of
computation time is to divide  your big computation into smaller ones.
You can  use &#60;code&#62;window.setTimeout&#60;/code&#62; for that, meaning  you transform your
recursive calls like &#60;code&#62;f()&#60;/code&#62;  into &#60;code&#62;window.setTimeout(f, 0)&#60;/code&#62; so that &#60;code&#62;f&#60;/code&#62;
will be called at some point. And if you have iterative loops instead,
write them recursive and use &#60;code&#62;window.setTimeout&#60;/code&#62;. That&#38;#39;s bad.  Because
then the browser  is unable to tell that it&#38;#39;s  crazy busy...  and it&#38;#39;s
still really busy. So you can increase the value 0 to 1 or 10 or more.
But if you increase it too much, it&#38;#39;ll become too slow...&#60;/p&#62;
&#60;p&#62;Ok, well, don&#38;#39;t use JavaScript. It&#38;#39;s a nightmare.&#60;/p&#62;
&#60;p&#62;We will probably rewrite the script using Js_of_ocaml at some point,
mainly because when you write in OCaml, you have static type checking,
and that saves so much time!&#60;/p&#62;
&#60;p&#62;To be followed...&#60;/p&#62;
      ]]></description>
    </item>

    <item>
      <title>(Exercise) Are there more 1s or 0s?</title>
      <link>http://pw374.github.io/posts/2013-09-25-16-19-07-ones-or-zeros.html</link>
      <category>ocaml</category><category>exercise</category>
      <pubDate>Wed, 25 Sep 2013 16:19:07 +0000</pubDate>
      <author>philippe.wang@cl.cam.ac.uk (Philippe Wang)</author>
      <guid>http://pw374.github.io/posts/2013-09-25-16-19-07-ones-or-zeros.html</guid>
      <description><![CDATA[
&#60;p&#62;The challenge is this:&#60;/p&#62;
&#60;blockquote&#62;&#60;p&#62;Provide a program that will determine,  given a set of 1s and 0s, if
there are more 0s or more 1s.&#60;/p&#62;
&#60;/blockquote&#62;
&#60;p&#62;So  the   first  question  that  comes   to  my  mind   is  about  the
representation of that set of 1s and 0s. Is it a linked list, a double
linked list, an array, a tree, a string, or something else?&#60;/p&#62;
&#60;p&#62;If it&#38;#39;s a list (single linked or double linked actually doesn&#38;#39;t matter
much), it&#38;#39;s going to be pretty straightforward: just read the list and
use a counter. Yes, a single counter is enough, you can add one to the
counter when you meet a 1, and  subtract one when you meet a 0. At the
end, if  your counter has  its initial value,  then you have  the same
number of 1s and 0s. If it&#38;#39;s  lesser, then it has more 0s, else it has
more 1s.&#60;/p&#62;
&#60;p&#62;Let&#38;#39;s declare a type for the result.&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;type&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;result&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Equal&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;More_zeros&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;More_ones&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;count&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;rec&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;loop&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;counter&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62;
    &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;counter&#60;/span&#62;
    &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;loop&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;counter&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;+&#60;/span&#62;&#60;span class=&#39;number&#39;&#62;1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;
    &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;loop&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;counter&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;-&#60;/span&#62;&#60;span class=&#39;number&#39;&#62;1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;
    &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;loop&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;counter&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;
    &#60;span class=&#39;comment&#39;&#62;(* you might want to debate whether you should stop 
       when you get something else than a 0 or a 1. *)&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;in&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;loop&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;in&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;if&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;then&#60;/span&#62;
    &#60;span class=&#39;constructor module&#39;&#62;Equal&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;else&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;if&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;&#38;#62;&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;then&#60;/span&#62;
    &#60;span class=&#39;constructor module&#39;&#62;More_ones&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;else&#60;/span&#62;
    &#60;span class=&#39;constructor module&#39;&#62;More_zeros&#60;/span&#62;    &#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;Well, what&#38;#39;s the risk with this  program? The risk is that the integer
&#60;code&#62;counter&#60;/code&#62; overflows, of course! If you have a very long list of 1s (or
0s)  only, you  may  get things  just  wrong.  However,  in OCaml,  in
reality,  there&#38;#39;s  not really  a  chance  that  the integer  overflows
because of  the length of a  single linked list,  especially if you&#38;#39;re
using a 64-bit architecture based OCaml, on which the greatest integer
is 4_611_686_018_427_387_903 (about 4⨉10&#60;sup&#62;18&#60;/sup&#62;). There&#38;#39;s really
a long way  to have such a long list because  basically you would need
to  allocate more  than (about  32⨉10&#60;sup&#62;6&#60;/sup&#62; terabytes)  at once,
since basically a linked list of  integers is made of blocks that have
2 cells  each (one for  the integer, one  for the address of  the next
cell), each cell taking 64 bits (or 8 bytes).&#60;/p&#62;
&#60;p&#62;But then,  what if you  don&#38;#39;t have linked  lists but some  stream that
gives you  a very large number of  0s and/or 1s? Well,  to begin with,
counting from 0 to 4⨉10&#60;sup&#62;18&#60;/sup&#62; takes a really long time. If your
machine can  count from 0 to  10&#60;sup&#62;9&#60;/sup&#62; in a  single second (that
would  mean  your   machine  is  very  fast),  it   would  still  take
4⨉10&#60;sup&#62;9&#60;/sup&#62;  seconds,  which  is about  4000000000/(60&#60;em&#62;60&#60;/em&#62;24*365)
years.  Oh, that means about 126 years! So let&#38;#39;s just assume that a 63
bit signed  integer is enough for  us. And if you  really can&#38;#39;t assume
that for some reason, you can always implement 128 bit signed integers
quite easily, and  if you don&#38;#39;t know  how to do that or  if you&#38;#39;re too
lazy to do it, use the Big_int module.&#60;/p&#62;
&#60;p&#62;But let&#38;#39;s go  back the representation of those 0s and  1s. I&#38;#39;d like to
make the computation as fast as  possible and I&#38;#39;ll put those 0s and 1s
in a very compact representation. Each  0 and 1 will now only take one
bit in the  memory (with a possible constant  overhead for the whole).
For that,  let&#38;#39;s use  OCaml&#38;#39;s strings, which  are basically  arrays of
bytes.   The  longest  string I  can  have  on  my machine  will  bear
1_152_921_504_606_846_904  bits  (I  know  that because  I  multiplied
Sys.max_string_length   by   8),  and   that&#38;#39;s   a   lot  (more   than
10&#60;sup&#62;8&#60;/sup&#62;).&#60;/p&#62;
&#60;p&#62;Now say  we want to know  whether there are more  0s or 1s  as fast as
possible.  How do we do that?&#60;/p&#62;
&#60;p&#62;We don&#38;#39;t want  to count all 0s  and 1s bit by bit,  because that would
have quite  a high cost! Indeed, we  would have to get  each byte, and
for each byte  we would have to read  each of its 8 bits  (that can be
done) one by one.  We don&#38;#39;t want to do that.&#60;/p&#62;
&#60;p&#62;Instead, since we have bytes, we can conveniently allocate an array of
size 256.   Each cell of that  array will contain the  right number to
add to the counter. This way, we can read a byte, get its number of 0s
and 1s in O(1).&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;comment&#39;&#62;(* this table is computed only once *)&#60;/span&#62;
&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;table&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;number_for_a_byte&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;b&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;ref&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;in&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;for&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;i&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;to&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;7&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;do&#60;/span&#62;
      &#60;span class=&#39;keyword&#39;&#62;if&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;b&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;lsr&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;i&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;land&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;1&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;then&#60;/span&#62;
        &#60;span class=&#39;lower&#39;&#62;decr&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62;
      &#60;span class=&#39;keyword&#39;&#62;else&#60;/span&#62;
        &#60;span class=&#39;lower&#39;&#62;incr&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;done&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;;&#60;/span&#62;
    &#60;span class=&#39;keywordsign prefix&#39;&#62;!&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;in&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;a&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Array&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;.&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;make&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;256&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;in&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;for&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;i&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;to&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;255&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;do&#60;/span&#62;
    &#60;span class=&#39;lower&#39;&#62;a&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;.&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;i&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;&#38;#60;-&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;number_for_a_byte&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;i&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;done&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;;&#60;/span&#62;
  &#60;span class=&#39;lower&#39;&#62;a&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;Then let&#38;#39;s abstract from the means  to read new 0s and 1s, by assuming
we&#38;#39;ll be provided a function &#60;code&#62;f&#60;/code&#62; that given &#60;code&#62;()&#60;/code&#62; will return 8 bits in
a value  of type  &#60;code&#62;char&#60;/code&#62;, and will  raise the  exception &#60;code&#62;End_of_file&#60;/code&#62;
when it has no more bits to give.&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;more_zeros_or_ones&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;c&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;ref&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;in&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;try&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;while&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;true&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;do&#60;/span&#62;
    &#60;span class=&#39;lower&#39;&#62;c&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;:=&#60;/span&#62; &#60;span class=&#39;keywordsign prefix&#39;&#62;!&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;c&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;+&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;table&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;.&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;int_of_char&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;done&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;End_of_file&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;;&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;if&#60;/span&#62; &#60;span class=&#39;keywordsign prefix&#39;&#62;!&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;c&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;then&#60;/span&#62;
    &#60;span class=&#39;constructor module&#39;&#62;Equal&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;else&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;if&#60;/span&#62; &#60;span class=&#39;keywordsign prefix&#39;&#62;!&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;c&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;&#38;#62;&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;0&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;then&#60;/span&#62;
    &#60;span class=&#39;constructor module&#39;&#62;More_zeros&#60;/span&#62;
  &#60;span class=&#39;keyword&#39;&#62;else&#60;/span&#62;
    &#60;span class=&#39;constructor module&#39;&#62;More_ones&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;Note  that &#60;code&#62;int_of_char&#60;/code&#62;  has a  zero-cost (i.e.,  it  &#38;quot;disappears&#38;quot; at
compile-time because  &#60;code&#62;int&#60;/code&#62; and &#60;code&#62;char&#60;/code&#62;  sort of share the  same memory
representation).  If  you want  better performance, you  should inline
&#60;code&#62;f&#60;/code&#62;, provided that you  know what it is (you may want  to check if the
compiler does the inlining itself first, just in case).&#60;/p&#62;
&#60;p&#62;Also, you may want  to use a table with a size  larger than 256 if you
have a lot of memory but I&#38;#39;m not so sure you&#38;#39;d gain performance unless
you  use nasty  tricks to  read larger  integers from  a  string. Then
again, you may  not end up using  a string, in which case  you have to
think with the whole problem in mind.&#60;/p&#62;
      ]]></description>
    </item>

    <item>
      <title>(Exercise) Odd or even?</title>
      <link>http://pw374.github.io/posts/2013-09-26-20-15-24-odd-or-even.html</link>
      <category>ocaml</category><category>exercise</category>
      <pubDate>Thu, 26 Sep 2013 20:15:24 +0000</pubDate>
      <author>philippe.wang@cl.cam.ac.uk (Philippe Wang)</author>
      <guid>http://pw374.github.io/posts/2013-09-26-20-15-24-odd-or-even.html</guid>
      <description><![CDATA[
      ]]></description>
    </item>

    <item>
      <title>Using MPP in two differents ways</title>
      <link>http://pw374.github.io/posts/2013-10-03-20-35-12-using-mpp-two-different-ways.html</link>
      <category>ocaml</category><category>mpp</category>
      <pubDate>Thu, 03 Oct 2013 20:35:12 +0000</pubDate>
      <author>philippe.wang@cl.cam.ac.uk (Philippe Wang)</author>
      <guid>http://pw374.github.io/posts/2013-10-03-20-35-12-using-mpp-two-different-ways.html</guid>
      <description><![CDATA[
&#60;h3 id=&#34;MPPisnowanOPAMpackage&#34;&#62;MPP is now an OPAM package&#60;/h3&#62;
&#60;p&#62;First of all, I&#38;#39;ve to say I&#38;#39;ve finally made an OPAM package 
for MPP! At the time I&#38;#39;m writing these words, it&#38;#39;s still waiting
for merging. &#60;a href=&#39;/posts/2013-10-03-20-39-07-OPAMaging-MPP.html&#39;&#62;Read more here.&#60;/a&#62;&#60;/p&#62;
&#60;h3 id=&#34;DescriptionofMPP&#34;&#62;Description of MPP&#60;/h3&#62;
&#60;p&#62;MPP is a preprocessor that has been designed to allow any (non-insane)
programming language to  be used as a preprocessor  for any text-based
file. The particularity is that  the users keep their initial language
as their  primary language:  the language(s) brought  by MPP  is (are)
secondary. It  means that ideally, if  you give a random  text file to
MPP, MPP  will return it  unchanged! And  in practice, you  can always
parameterize MPP  (on the command line,  or in an MPP  file) such that
for a given text file, MPP will return it unchanged.&#60;/p&#62;
&#60;p&#62;Of course, the purpose of MPP is not to replace the &#38;quot;cat&#38;quot; command!
But having the property that you can guarantee that MPP will behave as
the &#38;quot;cat&#38;quot; command if you want it to is important, because it means you
can customise MPP such that MPP can work for any text file.&#60;/p&#62;
&#60;p&#62;Side note:&#60;/p&#62;
&#60;blockquote&#62;&#60;p&#62;Well,  if you  discover a  language that has  some kind  of infinite
 semantics, which  are somehow automatically defined  by itself, such
 that  every  possible  sequence  of  bytes has  a  meaning  in  this
 language, MPP  might not  work because  you would  have a  hard time
 finding a token that&#38;#39;s not already taken, since there&#38;#39;re all already
 taken...  But I don&#38;#39;t think that it&#38;#39;s a realistic scenario, so let&#38;#39;s
 just forget about it.&#60;/p&#62;
&#60;/blockquote&#62;
&#60;h3 id=&#34;PrincipleofMPP&#34;&#62;Principle of MPP&#60;/h3&#62;
&#60;p&#62;The principle on which MPP is based is pretty simple. The users define
the tokens they want to use to determine the beginning and the end 
of MPP blocks. And there are 3 kinds of MPP blocks:&#60;/p&#62;
&#60;ol&#62;
 &#60;li&#62;basic MPP block;&#60;/li&#62;
 &#60;li&#62;basic MPP block with possible nesting;&#60;/li&#62;
 &#60;li&#62;foreign MPP block.&#60;/li&#62;
&#60;/ol&#62;

&#60;p&#62;The first and the second are used  for the same things except that the
second allows nesting. The third kind  is the most interesting one, as
it&#38;#39;s the one  that allows to embed virtually  any programming language
as a preprocessor language.&#60;/p&#62;
&#60;p&#62;Side note:&#60;/p&#62;
&#60;blockquote&#62;&#60;p&#62;Well,  you can&#38;#39;t easily use  pure lambda calculus as  a preprocessor
 language.   Your programming  language has  to have  some notion  of
 input/output to  process text. Using  pure lambda calculus  might be
 very  painful and  it  would start  by making  it  impure enough  to
 interact with the rest of the world.&#60;/p&#62;
&#60;/blockquote&#62;
&#60;h3 id=&#34;Example1thebasics&#34;&#62;Example 1: the basics&#60;/h3&#62;
&#60;p&#62;So, let&#38;#39;s say  you&#38;#39;re writing a program using the  OCaml language, and
you want &#60;code&#62;x&#60;/code&#62; to be a random integer.&#60;/p&#62;
&#60;p&#62;You can write this:&#60;/p&#62;
&#60;pre class=&#39;ocaml&#39;&#62;&#60;code class=&#39;ocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;x&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Random&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;.&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;int&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;max_int&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;and if you want to be sure  that the number is different each time you
execute  your  program,  you   should  use  &#60;code&#62;Random.self_init&#60;/code&#62;  or  an
equivalent.&#60;/p&#62;
&#60;p&#62;Now what if you want a random number to be generated at compile time?
You can&#38;#39;t do it in pure OCaml. You need to preprocess your file and/or
to read from another file...&#60;/p&#62;
&#60;p&#62;With MPP, you can write this:&#60;/p&#62;
&#60;pre class=&#39;ocaml&#39;&#62;&#60;code class=&#39;ocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;x&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;&#38;#60;&#38;#60;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;cmd&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;echo&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;$&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;RANDOM&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;&#38;#62;&#38;#62;&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;if you use mpp with these parameters: &#60;code&#62;-so &#38;#39;&#38;lt;&#38;lt;&#38;#39; -sc &#38;#39;&#38;gt;&#38;gt;&#38;#39;&#60;/code&#62; to set
opening and closing tokens to &#60;code&#62;&#38;lt;&#38;lt;&#60;/code&#62; and &#60;code&#62;&#38;gt;&#38;gt;&#60;/code&#62;. 
Default tokens are respectively &#60;code&#62;((&#60;/code&#62; and &#60;code&#62;))&#60;/code&#62; but if you&#38;#39;re writing
some OCaml code, you shouldn&#38;#39;t use &#60;code&#62;((&#60;/code&#62; and &#60;code&#62;))&#60;/code&#62; because
there&#38;#39;s quite a chance that they appear as OCaml code in your file.&#60;/p&#62;
&#60;p&#62;What happens with MPP is that it simply echoes everything that is
not MPP, and when it&#38;#39;s MPP, it interprets the commands.
The &#60;code&#62;cmd&#60;/code&#62; builtin is probably the simplest and the most powerful,
since it calls your shell with what follows &#60;code&#62;cmd&#60;/code&#62;. The first
line is the command that is called, and what follows is given to
the command as its standard input.&#60;/p&#62;
&#60;p&#62;So, basically,&#60;/p&#62;
&#60;pre class=&#39;ocaml&#39;&#62;&#60;code class=&#39;ocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;x&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;&#38;#60;&#38;#60;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;cmd&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;echo&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;$&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;RANDOM&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;&#38;#62;&#38;#62;&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;mod&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;42&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;given to MPP has the same semantics as this Bash script&#60;/p&#62;
&#60;pre class=&#39;bash&#39;&#62;&#60;code class=&#39;bash&#39;&#62;echo -n &#38;#39;let x = &#38;#39;
echo $RANDOM
echo &#38;#39; mod 42&#38;#39;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;Now, instead of using non-nesting tokens, you can use nesting tokens,
the only difference being that you can nest commands. Wait, what if
you nest with non-nesting commands? Well, MPP has a very simple syntax.
If you can&#38;#39;t nest, you really can&#38;#39;t nest.
So, if you write &#60;code&#62;&#38;lt;&#38;lt; echo &#38;lt;&#38;lt; echo 42 &#38;gt;&#38;gt; &#38;gt;&#38;gt;&#60;/code&#62; it just doesn&#38;#39;t work!
Moreover, you have a syntax error because the first &#60;code&#62;&#38;gt;&#38;gt;&#60;/code&#62; is seen as the
closing token for the first &#60;code&#62;&#38;lt;&#38;lt;&#60;/code&#62;, and MPP stops when there&#38;#39;s a syntax
error. If you want to echo &#60;code&#62;&#38;lt;&#38;lt; echo 42 &#38;gt;&#38;gt;&#60;/code&#62;, it is possible, you just
have to name your block, as in &#60;code&#62;&#38;lt;&#38;lt;name echo &#38;lt;&#38;lt; echo 42 &#38;gt;&#38;gt; name&#38;gt;&#38;gt;&#60;/code&#62;
and then it just works!&#60;/p&#62;
&#60;p&#62;Note that with nesting tokens, you have to name &#60;strong&#62;all&#60;/strong&#62; outer tokens.
The default tokens are &#60;code&#62;{{&#60;/code&#62; and &#60;code&#62;}}&#60;/code&#62;. So, to nest some commands, you
can write for instance &#60;code&#62;{{name set x {{ cmd cat foo.txt }} name}}&#60;/code&#62;.
Note that the the most inner block doesn&#38;#39;t have to be a nesting one,
as it doens&#38;#39;t nest any. It means you could write
&#60;code&#62;{{name set x &#38;lt;&#38;lt; cmd cat foo.txt &#38;gt;&#38;gt; name}}&#60;/code&#62; instead.
And note that only the most inner nesting block can be nameless and that&#38;#39;s 
&#60;em&#62;in some cases only&#60;/em&#62;.&#60;/p&#62;
&#60;p&#62;Note: the  technique presented above (in  example 1) has been  used to
generate the new OCaml website.&#60;/p&#62;
&#60;h3 id=&#34;Example2usingOCamlasapreprocessorlanguage&#34;&#62;Example 2: using OCaml as a preprocessor language&#60;/h3&#62;
&#60;p&#62;When MPP is used with the option &#60;code&#62;-l&#60;/code&#62;, it produces a program that prints
the file, using information provided to MPP about the language specified
with &#60;code&#62;-l&#60;/code&#62;. For instance, &#60;code&#62;mpp -l ocaml&#60;/code&#62; will produce an OCaml program.&#60;/p&#62;
&#60;p&#62;If you apply &#60;code&#62;mpp -l ocaml&#60;/code&#62; to a file F that contains no MPP commands,
then you have an OCaml  program  that, when executed, produces the 
original file F.&#60;/p&#62;
&#60;p&#62;When you use &#60;code&#62;-l ocaml&#60;/code&#62;, all &#38;quot;foreign blocks&#38;quot; are considered as 
OCaml code and it will just &#38;quot;pass through&#38;quot;.
So, if you write &#60;code&#62;42 {&#38;lt; let x = 23 &#38;gt;} Hello&#60;/code&#62;,
it will be translated to this program:&#60;/p&#62;
&#60;pre class=&#39;ocaml&#39;&#62;&#60;code class=&#39;ocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;print_string&#60;/span&#62; &#60;span class=&#39;string&#39;&#62;&#38;#34;42 &#38;#34;&#60;/span&#62;
&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;x&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;number&#39;&#62;23&#60;/span&#62;
&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;print_string&#60;/span&#62; &#60;span class=&#39;string&#39;&#62;&#38;#34; Hello&#38;#34;&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;It&#38;#39;s not exactly as flexible as &#38;quot;you can write anything at the top-level&#38;quot;.
Indeed, you may write any valid top-level definition. It could be
a type definition, a module definition, really anything you want that
is valid at the top level and that does not require double semi-colons.
That is, you cannot write &#60;code&#62;{&#38;lt; print_int 42 &#38;gt;}&#60;/code&#62;because it&#38;#39;s not a valid top-level phrase, you should write this instead
&#60;code&#62;{&#38;lt; let _ = print_int 42 &#38;gt;}&#60;/code&#62;.
If you really love playing at edges, you could write
&#60;code&#62;{&#38;lt; ;; print_int 42 ;; &#38;gt;}&#60;/code&#62;and it might work... if there is something preceding. If there isn&#38;#39;t
(but that&#38;#39;s not trivial to guess because the semantics of MPP might 
change on this precise point, I don&#38;#39;t know, I can&#38;#39;t promise right now),
then you could perhaps write &#60;code&#62;{&#38;lt; print_int 42;; &#38;gt;}&#60;/code&#62;.&#60;/p&#62;
&#60;p&#62;But you can&#38;#39;t convert a block of text into an OCaml function. You can&#38;#39;t
write something like you would do in PHP, such as:&#60;/p&#62;
&#60;pre&#62;&#60;code&#62;&#38;lt;ul&#38;gt;
  {&#38;lt; for i = 1 to 42 do &#38;gt;}
    &#38;lt;li&#38;gt; {&#38;lt; print_int i &#38;gt;} &#38;lt;/li&#38;gt;
  {&#38;lt; done &#38;gt;}
&#38;lt;/ul&#38;gt;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;Oh but wait!  You can use functors...&#60;/p&#62;
&#60;p&#62;So in functor-style, you can write this:&#60;/p&#62;
&#60;pre&#62;&#60;code&#62;&#38;lt;ul&#38;gt;
  {&#38;lt; module I (X:sig val i : int end) = struct &#38;gt;}
    &#38;lt;li&#38;gt; {&#38;lt; let _ = print_int X.i &#38;gt;} &#38;lt;/li&#38;gt;
  {&#38;lt; end &#38;gt;}
  {&#38;lt; let _ = for i = 1 to 42 do
       let module M = I(struct let i = i end) in
       ()
     done &#38;gt;}
&#38;lt;/ul&#38;gt;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;Sorry if that hurts  your eyes, but life is not  always easy.  Oh, and
if you think it&#38;#39;s  overkill, well, of course it is,  that&#38;#39;s a tiny toy
example! I&#38;#39;m actually using this  functor-style to write this blog. It
means that  I generate a  template with the functor-style  headers and
footers and I write inside the functor using Markdown, and when I need
to write some OCaml code, I use MPP features. And when I need to print
MPP stuff, I use  the 2 worlds of MPP, but it&#38;#39;s late  and I don&#38;#39;t want
to go into details just right  now. What&#38;#39;s important is that it&#38;#39;s nice
and it  works. I&#38;#39;ve  always wanted  to be able  to &#60;em&#62;easily&#60;/em&#62;  embed the
OCaml language in any text (LaTeX, ML, HTML, Bash, etc.) file, and now
I can!!  :)&#60;/p&#62;
      ]]></description>
    </item>

    <item>
      <title>OPAMaging MPP</title>
      <link>http://pw374.github.io/posts/2013-10-03-20-39-07-OPAMaging-MPP.html</link>
      <category>ocaml</category><category>mpp</category><category>opam</category>
      <pubDate>Thu, 03 Oct 2013 20:39:07 +0000</pubDate>
      <author>philippe.wang@cl.cam.ac.uk (Philippe Wang)</author>
      <guid>http://pw374.github.io/posts/2013-10-03-20-39-07-OPAMaging-MPP.html</guid>
      <description><![CDATA[
      ]]></description>
    </item>

    <item>
      <title>(Example) A use case of MPP in an OCaml program</title>
      <link>http://pw374.github.io/posts/2013-10-04-13-31-30-example-use-case-of-MPP.html</link>
      <category>ocaml</category><category>mpp</category>
      <pubDate>Fri, 04 Oct 2013 13:31:30 +0000</pubDate>
      <author>philippe.wang@cl.cam.ac.uk (Philippe Wang)</author>
      <guid>http://pw374.github.io/posts/2013-10-04-13-31-30-example-use-case-of-MPP.html</guid>
      <description><![CDATA[
      ]]></description>
    </item>

    <item>
      <title>High-power LEDs for super-bright light</title>
      <link>http://pw374.github.io/posts/2013-10-07-12-56-46-highpower-LEDs-for-superbright-light.html</link>
      <category>electronics</category><category>LED</category>
      <pubDate>Mon, 07 Oct 2013 12:56:46 +0000</pubDate>
      <author>philippe.wang@cl.cam.ac.uk (Philippe Wang)</author>
      <guid>http://pw374.github.io/posts/2013-10-07-12-56-46-highpower-LEDs-for-superbright-light.html</guid>
      <description><![CDATA[
&#60;p&#62;I&#38;#39;ve been &#38;quot;playing&#38;quot; with COB LEDs for about half a year now. Here&#38;#39;s a 
summary of my experience.&#60;/p&#62;
&#60;h3 id=&#34;Preliminaries&#34;&#62;Preliminaries&#60;/h3&#62;
&#60;h4 id=&#34;COBLEDs&#34;&#62;COB LEDs&#60;/h4&#62;
&#60;p&#62;A  &#38;quot;COB LED&#38;quot; is a  basically a bunch of tiny  LEDs put on
together to  provide a very  energy-efficient and usually  very bright
LED (using  both parallel  and series circuit  schemes). Note  that it
means the  voltage of COB LEDs  are not the voltage  of &#38;quot;normal LEDs&#38;quot;,
since putting some LEDs in series means adding up voltage values!&#60;/p&#62;
&#60;h4 id=&#34;AnLEDdoesnotbehavelikeanincandescentlightbulb&#34;&#62;An LED does not behave like an incandescent light bulb&#60;/h4&#62;
&#60;p&#62;Also,  note that  if there&#38;#39;s  a roughly  linear relation
between light  intensity and voltage  for classic lamps, it&#38;#39;s  not the
case  at all  with LEDs!  With  LEDs, basically,  the light  intensity
varies with the amperage, not the voltage. So if you lower the voltage
by a  very little bit, it will  shine as bright if  the amperage keeps
up; if  you lower  the voltage too  much, it basically  stops emitting
light (e.g.,  if you give  it 16V instead  of 19V, you have  so little
light that it&#38;#39;s  really useless), but if you  increase the voltage too
much you still fry your LEDs so you don&#38;#39;t want to do that at all.&#60;/p&#62;
&#60;h4 id=&#34;LightcolorsmeasuredinKelvin&#34;&#62;Light colors, measured in Kelvin&#60;/h4&#62;
&#60;p&#62;Basically,  2700K  to   3300K  correspond  to  classic  (discontinued)
incandescent  light bulbs,  and  it&#38;#39;s quite  close  to classic  candle
light, which  is about  1850K.  6500K  is day light  as in  &#38;quot;the light
provided by the Sun on a sunny  day at noon&#38;quot;, which seems very cool if
it&#38;#39;s  dark outside or  if you  have warm  light around.   My favourite
artificial light color  is generally from 4000K to  5000K.  I find the
3000K quite  acceptable, below  that is too  warm, above 6000K  is too
cool.&#60;/p&#62;
&#60;p&#62;&#60;strong&#62;Don&#38;#39;t  get  me  wrong:  in  this  post, &#38;quot;cool&#38;quot;  not  a  synonym  for
&#38;quot;awesome&#38;quot;, stick to its original meaning instead.&#60;/strong&#62;&#60;/p&#62;
&#60;p&#62;&#60;a href=&#39;http://en.wikipedia.org/wiki/Color_temperature#Categorizing_different_lighting&#39;&#62;Read more on Wikipedia.&#60;/a&#62;&#60;/p&#62;
&#60;h4 id=&#34;Colorspectraldistribution&#34;&#62;Color spectral distribution&#60;/h4&#62;
&#60;p&#62;Note  that LEDs  generally have  a very  narrow light  color spectrum.
That  means that  instead  of emitting  light  of a  lot of  different
colors, including  some colors  you don&#38;#39;t see  or colors that  are not
very much noticed because they are less intensively emitted, LEDs will
really emitt  just the color  you asked for.  That is not such  a good
thing (it&#38;#39;s not  so bad either). But as a  consequence, you might feel
that the light  emitted by an LED is not very  comfortable.  What I do
is that I mainly  use warm light LEDs and I add  a few cool light LEDs
amongst them: it goes  from 1 cool for 6 warms to  1 for 1. The result
of 1  for 1 is quite  nice when it&#38;#39;s  bright outside, but it&#38;#39;s  not so
nice if it&#38;#39;s in the middle of the night.&#60;/p&#62;
&#60;ul&#62;
 &#60;li&#62;&#60;p&#62;spectral power distribution: &#60;a href=&#39;http://en.wikipedia.org/wiki/Spectral_power_distribution&#39;&#62;read more on Wikipedia.&#60;/a&#62;; &#60;a href=&#39;https://www.google.com/search?q=led+spectral+power+distribution&#39;&#62;find more on Google.&#60;/a&#62;&#60;/p&#62;
 &#60;/li&#62;
 &#60;li&#62;&#60;p&#62;LED color rendering index: &#60;a href=&#39;http://en.wikipedia.org/wiki/High_CRI_LED_Lighting&#39;&#62;read more on Wikipedia.&#60;/a&#62;; &#60;a href=&#39;https://www.google.com/search?q=led+color+rendering+index&#39;&#62;find more on Google.&#60;/a&#62;&#60;/p&#62;
 &#60;/li&#62;
&#60;/ul&#62;

&#60;h3 id=&#34;Whynotsimplybuynormallamps&#34;&#62;Why not simply buy normal lamps?&#60;/h3&#62;
&#60;p&#62;Well, buying new  lamps for having more light  implicates buying light
bulbs as  well. I&#38;#39;m  not a very  big fan  of light bulbs  that contain
mercury  because if  you ever  break one,  you&#38;#39;ll breathe  mercury gas
(much likely in  small quantities though). And I  can&#38;#39;t install lights
on the wall  without asking my landlady for permission,  and even if I
did have permission,  it would mean putting electric  wires inside the
wall and that&#38;#39;s not really an  idea that speaks to me (I&#38;#39;ve never done
that) and  that means painting the  wall afterwards (not a  big fan of
painting walls either). What about  LEDs then? Don&#38;#39;t I need to install
them on the wall  anyway? Well, no, I don&#38;#39;t! I have  access to some of
the iron  based framework, and  as LEDs are  light weight and  flat, I
stick them  on some material  on which I  put some magnets,  et voilà!
(Now I&#38;#39;m even a bigger fan of strong magnets than before.)&#60;/p&#62;
&#60;p&#62;Well, I  won&#38;#39;t deny it, the  main reason why  I wanted to use  LEDs is
that   it&#38;#39;s   super  high   tech,   it&#38;#39;s   fun,   it&#38;#39;s  powerful   and
energy-efficient (and  ecological), it&#38;#39;s  nice, it&#38;#39;s the  future, it&#38;#39;s
geek. Also, we plan on using LEDs massively in university of Cambridge
buildings, starting with the department of computer science.&#60;/p&#62;
&#60;h3 id=&#34;WhatI39veused&#34;&#62;What I&#38;#39;ve used&#60;/h3&#62;
&#60;h4 id=&#34;LEDs&#34;&#62;LEDs&#60;/h4&#62;
&#60;p&#62;I&#38;#39;ve           essentially            used           &#60;a href=&#39;http://www.rapidonline.com/Electronic-Components/SMD-Power-LEDs-6W-COB-Star-519319&#39;&#62;6W           COB
LEDs&#60;/a&#62;,
which — according  to the specs given by their  manufacturers — are as
efficient  as 120lm/W  or 108lm/W,  depending on  if you  prefer white
light or  warm white  light. I gave  a try  to more a  classic (though
high-power)  LED before:  &#60;a href=&#39;http://www.rapidonline.com/Electronic-Components/Power-LED-Modules-9x-1W-White-and-Warm-White-502683&#39;&#62;9  pieces of  1W  LEDs put  together on  an
aluminium
disc&#60;/a&#62;. Well,
I switched  to COB LEDs for three  reasons. The first one  is that COB
LEDs are more energy-efficient.  The second one is that the voltage of
the COB  LEDs that I use is  higher (19V instead of  10V), which means
that for a  given wattage, the current intensity  (amperage) is lower,
and  that means  less chance  for the  wires to  heat...  (I&#38;#39;m  not an
electronician nor  a physisist, please  correct me if I&#38;#39;m  wrong.) And
the third one is  that COB LEDs are very compact. The  &#38;quot;9 pieces of 1W
LEDs on a  disc&#38;quot; is really big: the diameter is  88mm. The drawback is
that the COB LEDs that I use are only available in the 6500K and 3000K
color  temperatures, whereas the  other ones  are available  in 6500K,
4000K, 3000K and 2500K; 400K being my favourite.&#60;/p&#62;
&#60;h4 id=&#34;Powersupplyunits&#34;&#62;Power supply units&#60;/h4&#62;
&#60;p&#62;It&#38;#39;s not that  easy to provide electrical power  to LEDs... because we
need a  potentially quite  high amperage, the  right voltage,  and the
latter has to  be very stable (or at least never  reach a higher value
than the expected  one, otherwise the LEDs burn  and die quite easily,
and we  don&#38;#39;t want to kill  some hardware that&#38;#39;s supposed  to last ten
and up to thirty years).&#60;/p&#62;
&#60;p&#62;I     recommend    &#60;a href=&#39;http://www.rapidonline.com/Electrical-Power/36w-Volt-Adjustable-Multi-Output-Psu-eup-85-2908&#39;&#62;this    power     supply    unit     (PSU)    from
Rapid&#60;/a&#62;
if you&#38;#39;re  powering at most 30  watts of LEDs  at a voltage of  24V or
less for three  reasons: it seems to  me so far that it&#38;#39;s  a very good
quality PSU, the voltage is well  regulated, it does provide up to 30W
without  complaining  or  heating  up,  it switches  on  very  quickly
(virtually instantaneously). I have used 2 of them for about 6 months.
(I haven&#38;#39;t  tried to make it  work at 36W because  it would supposedly
diminish its lifespan.)&#60;/p&#62;
&#60;p&#62;Well, that 36W PSU is  currently (early October 2013)  out of stock,
and since I visited  (randomly) a  Maplin store  and saw 
&#60;a href=&#39;http://www.maplin.co.uk/maplin-120w-auto-voltage-universal-laptop-power-supply-with-usb-charging-531311&#39;&#62;this 120W  laptop power supply
unit&#60;/a&#62; for less than £40,
I bought two of them to give  them a shot. They are a lot cheaper than
the 36W PSU I&#38;#39;ve been using so far, if we compare the price-over-power
ratio.  Well,  the voltage  they deliver seems  okay: according  to my
cheap multimeter,  so it&#38;#39;s not really the  most reliable measurement,
they deliver 19.2V when using a  19V head. The main drawback of this adaptor
is that  it takes  time to &#38;quot;boot&#38;quot;! (Yes, it means it will &#60;em&#62;not&#60;/em&#62; deliver power 
during those 5 seconds.)   It&#38;#39;s not  really a problem  for a
laptop, but for a lighting system,  having to wait 5 full seconds 
just seems  like forever. So it means that  if I want instantaneous
light-on feature, I need a switch  between the PSU and the LED instead
of between the wall plug and  the PSU. Well, in practice, I think I&#38;#39;ll
simply wait 5  seconds, because I&#38;#39;ll only use them when  I want a very
very bright light, since I  already have 2 LED-based lighting devices
powered by those 36W PSUs that provide power instantaneously.&#60;/p&#62;
&#60;p&#62;The other drawback is that it&#38;#39;s made to work with (existing) laptops
and they provide one connector per model (i.e., shape of the head and
voltage), so you can&#38;#39;t use any connector and still assume you&#38;#39;ll be able
to select the voltage: here, the head determines the voltage you&#38;#39;ll get.&#60;/p&#62;
&#60;h4 id=&#34;Heat&#34;&#62;Heat!&#60;/h4&#62;
&#60;p&#62;One of the biggest (potential) problem  with COB LEDs is that, as they
are  very powerful and  very tiny,  you&#38;#39;re supposed  to stick  them on
something that can dissipate the heat that they produce. What I learnt
from that is that iron is  a very very slow heat conductor compared to
aluminium.               I&#38;#39;m              using             &#60;a href=&#39;http://www.amazon.co.uk/dp/B002HMQE86/&#39;&#62;aluminium
rulers&#60;/a&#62;   because   it&#38;#39;s   the
cheapest flat thing made of  aluminium that I could find.  Three rules
very easily dissipate  the heat produced by 4  LEDs.  I tried tripling
the density  of LEDs... It was not  a good idea, as  the rulers become
hot quite rapidly: within a few  minutes, they reach close to 50°C. So
with 4 LEDs per ruler, active fan cooling may dissipate the heat.&#60;/p&#62;
&#60;h4 id=&#34;StickingCOBLEDs&#34;&#62;Sticking COB LEDs&#60;/h4&#62;
&#60;p&#62;To    stick   LEDs,    I   used    some   &#60;a href=&#39;http://www.akasa.com.tw/update.php?tpl=product/product.detail.tpl&#38;amp;type=Accessories&#38;amp;type_sub=Thermal%20Interface&#38;amp;model=AK-TT12-80&#39;&#62;akasa    thermal   adhesive
tape&#60;/a&#62; that I bought on
Amazon, and it works pretty well.&#60;/p&#62;
&#60;h4 id=&#34;Theworstpart&#34;&#62;The worst part...&#60;/h4&#62;
&#60;p&#62;... is obviously, to me, the soldering part. It&#38;#39;s quite hard to solder
those COB LEDs because the contact spots are very small, so it takes
a tremendous amount of time.&#60;/p&#62;
&#60;h3 id=&#34;Overall&#34;&#62;Overall&#60;/h3&#62;
&#60;h4 id=&#34;Whybrightlightisimportant&#34;&#62;Why bright light is important...&#60;/h4&#62;
&#60;p&#62;I feel  that it&#38;#39;s important to  me to face (very)  bright light during
the day, and  it&#38;#39;s best if it comes directly  from the sun. Apparently
(although I&#38;#39;m not  a hundred percent sure) it&#38;#39;s  actually important to
be exposed to (very) bright light at least 30 minutes a day.&#60;/p&#62;
&#60;p&#62;So, instead of using a very expensive 
&#60;a href=&#39;https://www.google.com/search?q=SAD+light&#39;&#62;S.A.D.  light&#60;/a&#62; 
to prevent potential
&#60;a href=&#39;http://en.wikipedia.org/wiki/Seasonal_affective_disorder&#39;&#62;seasonal affective disorder&#60;/a&#62;,
well, I&#38;#39;m using very bright state-of-the-art LEDs to light up my home. :-)&#60;/p&#62;
&#60;h4 id=&#34;Conclusion&#34;&#62;Conclusion&#60;/h4&#62;
&#60;p&#62;LEDs are awesome because they need very little space compared to other
light-emitting devices.&#60;/p&#62;
&#60;p&#62;As they&#38;#39;re very energy-efficient, using them for indirect lighting
doesn&#38;#39;t consume too much electricity.&#60;/p&#62;
&#60;p&#62;They can last up to 10 or 30 years if they&#38;#39;re taken well care of.
So once you make them, you don&#38;#39;t need to worry about them for a while...
Well, I&#38;#39;m not sure the power supply units can last that many years,
but it&#38;#39;s not the hard part to change.&#60;/p&#62;
&#60;p&#62;If    you     live    in    Cambridge    (UK),     you    could    use
&#60;a href=&#39;http://makespace.org&#39;&#62;Makespace&#60;/a&#62;  to build  your own  LED-based super
bright and/or  super smart lighting system. Well,  given my low-budget
when I  started building those LED-based lighting  systems, I couldn&#38;#39;t
afford Makespace membership, so I kind of have all I need to handcraft
at home.&#60;/p&#62;
&#60;h5 id=&#34;Pictures&#34;&#62;Pictures&#60;/h5&#62;
&#60;p&#62;4 COB LEDs on 3 aluminium  rulers, in parallel.  The 3 aluminum rulers
are  stuck  together using  aluminium  tape,  which  has good  thermal
conductivity, reflects light not too badly and is not too expensive.&#60;/p&#62;
&#60;p&#62;&#60;a href=&#39;/img/4-COB-LEDs-off.jpg&#39;&#62;&#60;img src=&#39;/img/4-COB-LEDs-off-640.jpg&#39; alt=&#39;4-COB-LEDs-off-640.jpg&#39; /&#62;&#60;/a&#62;&#60;/p&#62;
&#60;p&#62;&#60;a href=&#39;/img/4-COB-LEDs-off-unplugged.jpg&#39;&#62;&#60;img src=&#39;/img/4-COB-LEDs-off-unplugged-640.jpg&#39; alt=&#39;4-COB-LEDs-off-unplugged-640.jpg&#39; /&#62;&#60;/a&#62;&#60;/p&#62;
&#60;p&#62;&#60;a href=&#39;/img/4-COB-LEDs-off2.jpg&#39;&#62;&#60;img src=&#39;/img/4-COB-LEDs-off2-640.jpg&#39; alt=&#39;4-COB-LEDs-off2-640.jpg&#39; /&#62;&#60;/a&#62;&#60;/p&#62;
&#60;h6 id=&#34;IfyoudowantLEDsbutdon39twanttosolderanything&#34;&#62;If you do want LEDs but don&#38;#39;t want to solder anything&#60;/h6&#62;
&#60;p&#62;Well, you may find a lot of websites on
&#60;a href=&#39;https://www.google.com/search?q=COB+LED&#39;&#62;Google&#60;/a&#62; selling LEDs, you may also try
&#60;a href=&#39;http://kosilum.com/&#39;&#62;this one&#60;/a&#62;, which belongs to a friend of mine.&#60;/p&#62;
      ]]></description>
    </item>

    <item>
      <title>Functional visitors for a complex tree-shaped data structure</title>
      <link>http://pw374.github.io/posts/2014-01-06-09-24-25-functional-visitors.html</link>
      <category>ocaml</category>
      <pubDate>Mon, 06 Jan 2014 09:24:25 +0000</pubDate>
      <author>philippe.wang@cl.cam.ac.uk (Philippe Wang)</author>
      <guid>http://pw374.github.io/posts/2014-01-06-09-24-25-functional-visitors.html</guid>
      <description><![CDATA[
&#60;p&#62;Let&#38;#39;s consider this data type:&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;type&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;A&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;of&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;of&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;string&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;*&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;*&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;D&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;of&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;string&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;E&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;of&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;int&#60;/span&#62;
&#60;span class=&#39;keyword&#39;&#62;and&#60;/span&#62;  &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;list&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;If we want to write an abstraction to apply a function to this 
data structure (the one of type t)
without being bothered to treat the whole structure everytime,
we can get some inspiration from the visitor design pattern commonly used
in object-oriented programming. The “problem” is that we don&#38;#39;t have the 
same inheritance mechanism in functional programming, meaning that the default
behaviour has to be implemented with functions instead of using methods
that can be overriden in subclasses.&#60;/p&#62;
&#60;h3 id=&#34;Firstattempt&#34;&#62;First attempt&#60;/h3&#62;
&#60;p&#62;The following implementation met my needs:&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;rec&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;A&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;E&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;D&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;@&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;@&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;s&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t2&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;@&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;s&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t2&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
&#60;span class=&#39;comment&#39;&#62;(* val visit : (e -&#38;#62; t option) -&#38;#62; t -&#38;#62; t *)&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;With this abstraction, it becomes very easy to write a function
that removes all &#60;code&#62;A&#60;/code&#62;s:&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;remove_A&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;A&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;or all &#60;code&#62;B&#60;/code&#62;s:&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;remove_B&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;and it&#38;#39;s also very easy to convert all &#60;code&#62;E&#60;/code&#62;s to &#60;code&#62;D&#60;/code&#62;s:&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;convert_Es_to_Ds&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62;
  &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;E&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;i&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;[&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;D&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;string_of_int&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;i&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;Doing this with some &#60;code&#62;fold&#60;/code&#62; abstraction is not suitable because we would need
to do something like&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;rec&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;remove_B&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62;
  &#60;span class=&#39;constructor module&#39;&#62;List&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;.&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;rev&#60;/span&#62;
    &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;fold&#60;/span&#62;
       &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keyword&#39;&#62;fun&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
          &#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62;
          &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62;
          &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;A&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;E&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;D&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62;
          &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;s&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t2&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;s&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;remove_B&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;remove_B&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t2&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
       &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62;
       &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;in which case what bothers me most is the line that has
&#60;code&#62;C(s, remove_B t1, remove_B t2)&#60;/code&#62; because it means that 
we still have to make trivial recursive calls that are just annoying
to write (trivial code should be avoided whenever possible because it
increases the chances to introduce nasty bugs).&#60;/p&#62;
&#60;h3 id=&#34;Whataboutgenericity&#34;&#62;What about genericity?&#60;/h3&#62;
&#60;p&#62;Well, perhaps we might want to have a visitor that doesn&#38;#39;t always 
return a &#60;code&#62;t&#60;/code&#62;. Can we make it generic using polymorphic abstractions?
The implementation of &#60;code&#62;visit&#60;/code&#62; returns a value, so if we want it to 
be able to return something else, we have to parameterise the default
behaviour.&#60;/p&#62;
&#60;p&#62;So, let&#38;#39;s add a parameter to the function &#60;code&#62;visit&#60;/code&#62; and see what it looks like.
Well,  let&#38;#39;s call it &#60;code&#62;glue&#60;/code&#62; since it&#38;#39;s a function that glues 2 things together
(if you find a better name, please let me know).&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;rec&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;A&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;E&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;D&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;s&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t2&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
        &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62;
          &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;s&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t2&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
&#60;span class=&#39;comment&#39;&#62;(* val visit : (e -&#38;#62; &#38;#39;a list option) -&#38;#62; (&#38;#39;a list -&#38;#62; t -&#38;#62; t) -&#38;#62; t -&#38;#62; t *)&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;We&#38;#39;re almost there. There&#38;#39;s still that &#60;code&#62;&#38;#39;a list&#60;/code&#62;, which is less generic
than &#60;code&#62;&#38;#39;a&#60;/code&#62;. Well, &#60;code&#62;glue&#60;/code&#62; needs to have 2 parameters because it has to
be able to treat both branches of the pattern-matching filter, so we could 
make the first parameter optional. We could use optional arguments, and
we can see that &#60;code&#62;f&#60;/code&#62; already returns an option, 
can we just take advantage of that? Well, if we replace for instance&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;A&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;E&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;D&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;by&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;A&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;E&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;D&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
      &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;it does work for this branch but it doesn&#38;#39;t for the others because
one purpose of the visitor is to deeply traverse the
data structure automatically.
So we&#38;#39;re back to optional arguments...&#60;/p&#62;
&#60;p&#62;And so we could have that:&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;rec&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;?&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keyword&#39;&#62;fun&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;?&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;@&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;r&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;A&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;E&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;D&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;s&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t2&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
        &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; 
          &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;s&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t2&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
&#60;span class=&#39;comment&#39;&#62;(* val visit : (e -&#38;#62; t option) -&#38;#62; ?glue:(?l:t -&#38;#62; t -&#38;#62; t) -&#38;#62; t -&#38;#62; t *)&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;Then the problem is that it&#38;#39;s not polymorphic any more, while we want it to be polymorphic!
So let&#38;#39;s drop the default value for the parameter &#60;code&#62;glue&#60;/code&#62;.&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;rec&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;:&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;?&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;:&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;&#38;#39;&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;a&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;A&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;E&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;D&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
  &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;s&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t2&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;as&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;begin&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;~&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
      &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62;
        &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; 
          &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;C&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;s&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t1&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;,&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t2&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;::&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;f&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;tl&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;
    &#60;span class=&#39;keyword&#39;&#62;end&#60;/span&#62;
&#60;span class=&#39;comment&#39;&#62;(* val visit : (e -&#38;#62; &#38;#39;a option) -&#38;#62; (?l:&#38;#39;a -&#38;#62; t -&#38;#62; t) -&#38;#62; t -&#38;#62; t *)&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;There we go, we have a generic visitor for structures of type &#60;code&#62;t&#60;/code&#62;.&#60;/p&#62;
&#60;p&#62;As we did before, we may now define &#60;code&#62;remove_A&#60;/code&#62;, &#60;code&#62;remove_B&#60;/code&#62; and &#60;code&#62;convert_Es_to_Ds&#60;/code&#62;, 
using the following quite simple definition of &#60;code&#62;glue&#60;/code&#62;.&#60;/p&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;?&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;match&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keyword&#39;&#62;with&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;l&#60;/span&#62; &#60;span class=&#39;keywordsign infix&#39;&#62;@&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;remove_A&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;A&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;remove_B&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;B&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62; &#60;span class=&#39;keywordsign operator&#39;&#62;[]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;:&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;e&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;option&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;pre class=&#39;tryocaml&#39;&#62;&#60;code class=&#39;tryocaml&#39;&#62;&#60;span class=&#39;keyword&#39;&#62;let&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;convert_Es_to_Ds&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;=&#60;/span&#62;
  &#60;span class=&#39;lower&#39;&#62;visit&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;keyword&#39;&#62;function&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;E&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;i&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;Some&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;[&#60;/span&#62;&#60;span class=&#39;constructor module&#39;&#62;D&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;(&#60;/span&#62;&#60;span class=&#39;lower&#39;&#62;string_of_int&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;i&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;]&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;|&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;_&#60;/span&#62; &#60;span class=&#39;keywordsign&#39;&#62;-&#38;#62;&#60;/span&#62; &#60;span class=&#39;constructor module&#39;&#62;None&#60;/span&#62;&#60;span class=&#39;keywordsign&#39;&#62;)&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;glue&#60;/span&#62; &#60;span class=&#39;lower&#39;&#62;t&#60;/span&#62;&#60;/code&#62;&#60;/pre&#62;
&#60;p&#62;We could actually make it more generic by allowing &#60;code&#62;glue&#60;/code&#62; to return something
else than a &#60;code&#62;t&#60;/code&#62;, and we could have something resembling
&#60;code&#62;val visit : (e -&#38;gt; &#38;#39;a option) -&#38;gt; (?l:&#38;#39;a -&#38;gt; t -&#38;gt; &#38;#39;b) -&#38;gt; t -&#38;gt; &#38;#39;b&#60;/code&#62;.
Well, the problem is that we have to tell &#60;code&#62;visit&#60;/code&#62; how to reconstruct a visited &#60;code&#62;C&#60;/code&#62;.
It would be easy to have a more generic version of &#60;code&#62;visit&#60;/code&#62; of type
&#60;code&#62;val visit : (e -&#38;gt; &#38;#39;a option) -&#38;gt; (?l:&#38;#39;a -&#38;gt; t -&#38;gt; (&#38;#39;b * t)) -&#38;gt; t -&#38;gt; (&#38;#39;b * t)&#60;/code&#62;
but that&#38;#39;s become far from simple to understand: it looks like some sort of &#60;code&#62;visit&#60;/code&#62; 
and &#60;code&#62;fold&#60;/code&#62; merged together. Hmmm... Let&#38;#39;s not go that far, for now.&#60;/p&#62;
      ]]></description>
    </item>

</channel></rss>
